<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <name>Gamma</name>
    <description>A Minskowski spacetime diagram generator.</description>
    <inceptionYear>2021</inceptionYear>

    <groupId>org.freixas.gamma</groupId>
    <artifactId>gamma</artifactId>

    <!-- *** VERSION *** -->

    <version>1.0.1-alpha4</version>

    <developers>
        <developer>
            <name>Antonio Freixas</name>
            <email>gamma@freixas.org</email>
            <timezone>PST</timezone>
        </developer>
    </developers>

    <properties>

        <gamma.version>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}</gamma.version>
        <gamma.fullversion>${project.version}</gamma.fullversion>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>

        <skipTests>true</skipTests>

        <project.identifier>gamma</project.identifier>
        <app.name>gamma</app.name>
        <app.version>${gamma.version}</app.version>
        <windows.vendor>${project.name}</windows.vendor>

        <javafx.version>17.0.2</javafx.version>
        <jvm.modules>javafx.controls,javafx.fxml,javafx.swing,javafx.web</jvm.modules>
        <main-class>org.freixas.gamma.Gamma</main-class>

        <windows.upgrade.uuid>16182549-0ebf-4817-b77a-0e2fe720122c</windows.upgrade.uuid>

    </properties>

    <dependencies>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-swing</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.5.0</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>23.0.0</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>

    <scm>
        <developerConnection>
            scm:git:https://github.com/freixas/gamma.git
        </developerConnection>
    </scm>

    <build>
        <finalName>${project.artifactId}</finalName>

        <extensions>
            <!-- Used to inject the OS and architecture values in a consistent manner -->
            <!-- https://github.com/trustin/os-maven-plugin -->
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.0</version>
            </extension>
        </extensions>

        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>

        <!--
        Some of the plugins that come from the Maven super-pom are out of date.
        Replace them with the latest versions.
        -->

        <pluginManagement>
            <plugins>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.0.0-M5</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>3.0.0-M2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.11.0</version>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>

            <!--
            This is used just to manage the two forms of the version number. One
            form meets Windows packaging version requirements, the longer form
            is what I prefer.
            -->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <id>parse-version</id>
                        <goals>
                            <goal>parse-version</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
            The enforcer plugin makes sure we are building with the correct
            versions of Maven amd Java.
            -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.8.5</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>17.0.2</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
            The versions plugin can be used to check for the latest versions
            of the dependencies or plugins:
            versions:display-dependency-updates
            versions:display-plugin-updates
            -->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.9.0</version>
            </plugin>

            <!-- Clean the build -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>

            <!-- Compile control -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.0</version>
                <configuration>
                    <release>17</release>
                    <compilerArgs>
                        <arg>-Xlint:all</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!-- Support for JavaFX -->

            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>org.freixas.gamma/${main-class}</mainClass>
                </configuration>
            </plugin>

            <!-- Create JAR files -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency
                    </outputDirectory>
                </configuration>
            </plugin>

            <!--
            The assembly plugin is used to build a tar.gz file containing
            a universally installable version of the app.
            !-->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <finalName>${project.artifactId}-${gamma.fullversion}</finalName>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptors>
                        <descriptor>src/assembly/dep.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
            The plugins below are used to build installers. The resources
            plugin does for the installer what the assembly module's dep.xml
            does for the assembly module.
            -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <executions>

                    <execution>
                        <id>copy-resources-1</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/dependency/icons</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/icons</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <execution>
                        <id>copy-resources-2</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/dependency/help</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/help</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <execution>
                        <id>copy-resources-3</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/dependency/sample_scripts</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/sample_scripts</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <!--
            In addition to copying the resources (for an installer), we need to
            copy the dependencies. We exclude some dependencies that aren't
            needed by the final app and some dependencies that are provided by
            the package builder.
            -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.2.0</version>
                <executions>

                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>

                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>

                        <configuration>
                            <stripVersion>true</stripVersion>
                            <excludeGroupIds>
                                org.openjfx,junit,org.hamcrest,org.jetbrains
                            </excludeGroupIds>
                        </configuration>

                    </execution>

                </executions>
            </plugin>

            <!--
            See https://github.com/wiverson/jtoolprovider-plugin
            This plugin takes the pieces assembled by the resources and
            dependency plugins and runs them through jlink and jpackage.
            jpackage actually builds the final installable file using an
            external tool, using information in the src/packaging folder.
            -->

            <plugin>
                <!--  -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.34</version>
                <executions>
                    <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
                    this project with the JDK modules. -->
                    <execution>
                        <id>jlink</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                            <modulePath>
                                ${project.basedir}/javafx-${os.detected.classifier}/javafx-jmods-${javafx.version}/
                            </modulePath>
                            <addModules>${jvm.modules}</addModules>
                            <output>${project.build.directory}/jvm-image</output>
                            <args>
                                <arg>--strip-native-commands</arg>
                                <arg>--no-header-files</arg>
                                <arg>--strip-debug</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--compress=2</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.
                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <toolName>jpackage</toolName>
                            <writeOutputToLog>true</writeOutputToLog>
                            <writeErrorsToLog>true</writeErrorsToLog>
                            <failOnError>true</failOnError>
                            <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                            <args>@${project.build.directory}/packaging/${os.detected.name}-jpackage.txt</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

</project>
