// ************************************************************
// *
// * INTERACTIVE TWINS PARADOX
// *
// ************************************************************

stylesheet external "006-interactive-twins-paradox.css";

choice model = 1 choices "No acceleration", "1g acceleration" label "Acceleration" restart;

display origin: (50, 50), scale: 3;
set displayPrecision 2;
debug = false;

animation ;

// Twins Paradox Without/With Acceleration

bob = [observer ];

// choice model = 1 choices "No acceleration", "1g acceleration" label "Acceleration" restart;

if (model == 1) {
    alice = [observer
		    velocity    0 distance 0,
		    velocity  0.8 distance 4,
		    velocity -0.8 distance 4,
		    velocity    0];
}
else {
    alice = [observer
		    velocity      0 distance 0,
		    acceleration  1 distance 1,
		    acceleration  0 distance 2,
		    acceleration -1 distance 2,
		    acceleration  0 distance 2,
		    acceleration  1 distance 1,
		    velocity      0];
}

// ****************************************
// General options: axes, grids
// ****************************************

// Transform time from a spatial to a time dimension

toggle oneDimensional = true label "One-dimensional";

// Draw worldlines

toggle worldlines = false label "Worldlines";

// Axes

toggle bobAxes =   false  label "Bob's axes";
toggle aliceAxes = false label "Alice's axes";

// Grid

toggle bobGrid =   false label "Bob's grid";
toggle aliceGrid = false label "Alice's grid";

// Display times

toggle timeDisplay = false label "Display time computed/viewed";

// Line of simultaneity

toggle viewSimultaneity = false label "View line of simultaneity";

// Viewpoint

choice view  = 1
  choices "Bob's viewpoint and simultaneity",
          "Alice's viewpoint and simultaneity",
          "Bob's viewpoint/Alice's simultaneity",
	  "Alice's viewpoint/Bob's simultaneity"
  label "Viewpoint";

// Simulate from start to end of travel

bobStartTime = 0;
bobEndTime = dToT(8, alice);

aliceStartTime = 0;
aliceEndTime = dToTau(8, alice);

startTime = bobStartTime;
endTime   = bobEndTime;

travelTime = endTime - startTime;
tripDuration = 10;			// Seconds
totalDuration = tripDuration + 5;	// Seconds
tripFrames = tripDuration * 30;		// Animation frames
totalFrames = totalDuration * 30;	// Animation frames

animate count = 0 to totalFrames step 1;

tripSteps = travelTime / tripFrames;
t   = min(startTime + count * tripSteps, endTime);
tau = tToTau(t, alice);

// Determine the inertial frames at time t

bobFrame   = [frame observer bob   at time t];
aliceFrame = [frame observer alice at time t];
bobFrame1D   = bobFrame;
aliceFrame1D = aliceFrame;
if (oneDimensional) {
    bobFrame1D   = [frame velocity bobFrame.v origin (0, t)];
    aliceFrame1D = [frame velocity aliceFrame.v origin (0, tau) <- aliceFrame];
}

// Generate the lines of simultaneity

bobSimul   = [line axis x bobFrame   offset t];
aliceSimul = [line axis x aliceFrame offset tau];

// Determine all the intersections with the lines of simultaneity

bobPosBobSimul =   intersect(bobSimul,   bob);
alicePosBobSimul = intersect(bobSimul, alice);

bobPosAliceSimul =   intersect(aliceSimul, bob);
alicePosAliceSimul = intersect(aliceSimul, alice);

// Draw the grids requested

if (bobGrid)   grid frame: bobFrame,   class: "bob";
if (aliceGrid) grid frame: aliceFrame, class: "alice";

// Draw the axes requested

if (bobAxes)   axes frame: bobFrame,   class: "bob";
if (aliceAxes) axes frame: aliceFrame, class: "alice";

// Draw the lines of simultaneity

if (viewSimultaneity) {
    if (view == 1 || view == 4) {
	line bobSimul,   class: "simul, bob";
    }
    else {
	line aliceSimul, class: "simul, alice";
    }
}

// Draw the events along the selected line of simultaneity

if (view == 1 || view == 4) {
    event bobPosBobSimul,   class: "bob";
    event alicePosBobSimul, class: "alice";
}
else {
    event bobPosAliceSimul,   class: "bob";
    event alicePosAliceSimul, class: "alice";
}

// Draw the clock times and positions

if (timeDisplay) {
    if (view == 1 || view == 4) {
	lightToBob   = [line angle -45 through bobPosBobSimul];
	lightToAlice = [line angle 45 through alicePosBobSimul];

	if (debug) {
	    line lightToAlice, class: "light";
	    line lightToBob,   class: "light";
	}
	bobsSeenTime   = intersect(lightToAlice, bob).t;
	alicesSeenTime = tToTau(intersect(lightToBob, alice).t, alice);

	label bobPosBobSimul,   text: bobPosBobSimul.t,                  class: "bob,   calculatedTime";
	label bobPosBobSimul,   text: bobsSeenTime,                      class: "bob,   seenTime";
	label alicePosBobSimul, text: tToTau(alicePosBobSimul.t, alice), class: "alice, calculatedTime";
	label alicePosBobSimul, text: alicesSeenTime,                    class: "alice, seenTime";
    }
    else {
	lightToBob =   [line angle -45 through bobPosAliceSimul];
	lightToAlice = [line angle 45 through alicePosAliceSimul];

	if (debug) {
	    line lightToAlice, class: "light";
	    line lightToBob,   class: "light";
	}
	bobsSeenTime   = intersect(lightToAlice, bob).t;
	alicesSeenTime = tToTau(intersect(lightToBob, alice).t, alice);

	label bobPosAliceSimul,   text: bobPosAliceSimul.t,                  class: "bob,   calculatedTime";
	label bobPosAliceSimul,   text: bobsSeenTime,                        class: "bob,   seenTime";
	label alicePosAliceSimul, text: tToTau(alicePosAliceSimul.t, alice), class: "alice, calculatedTime";
	label alicePosAliceSimul, text: alicesSeenTime,                      class: "alice, seenTime";
    }
}

// Draw the worldlines

bobWBob =     setInterval(bob,   [interval time 0 to bobPosBobSimul.t]);
aliceWBob =   setInterval(alice, [interval time 0 to alicePosBobSimul.t]);
bobWAlice =   setInterval(bob,   [interval time 0 to bobPosAliceSimul.t]);
aliceWAlice = setInterval(alice, [interval time 0 to alicePosAliceSimul.t]);

if (worldlines) {
    if (view == 1 || view == 4) {
	worldline bobWBob,     class: "bob";
	worldline aliceWBob,   class: "alice";
    }
    else {
	worldline bobWAlice,   class: "bob";
	worldline aliceWAlice, class: "alice";
    }
}

// Enable the selected viewpoint

if (view == 1 || view == 3) {
    frame bobFrame1D;
}
else {
    frame aliceFrame1D;
}
